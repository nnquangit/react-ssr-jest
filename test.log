
> react-ssr-jest@1.0.0 build:server D:\projects\github\react-ssr-jest
> cross-env NODE_ENV=production webpack --config webpack.server.js --progress --hide-modules

TestWebpackPlugin 

Compiler {
  _pluginCompat: 
   SyncBailHook {
     _args: [ 'options' ],
     taps: [ [Object], [Object], [Object] ],
     interceptors: [],
     _call: [Function: lazyCompileHook],
     call: [Function: lazyCompileHook],
     _promise: [Function: lazyCompileHook],
     promise: [Function: lazyCompileHook],
     _callAsync: [Function: lazyCompileHook],
     callAsync: [Function: lazyCompileHook],
     _x: undefined },
  hooks: 
   { shouldEmit: 
      SyncBailHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     done: 
      AsyncSeriesHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     additionalPass: 
      AsyncSeriesHook {
        _args: [],
        taps: [],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     beforeRun: 
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     run: 
      AsyncSeriesHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     emit: 
      AsyncSeriesHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     afterEmit: 
      AsyncSeriesHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     thisCompilation: 
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     compilation: 
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     normalModuleFactory: 
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     contextModuleFactory: 
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     beforeCompile: 
      AsyncSeriesHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     compile: 
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     make: 
      AsyncParallelHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     afterCompile: 
      AsyncSeriesHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     watchRun: 
      AsyncSeriesHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     failed: 
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     invalid: 
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     watchClose: 
      SyncHook {
        _args: [],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     environment: 
      SyncHook {
        _args: [],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     afterEnvironment: 
      SyncHook {
        _args: [],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     afterPlugins: 
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     afterResolvers: 
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     entryOption: 
      SyncBailHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined } },
  name: undefined,
  parentCompilation: undefined,
  outputPath: '',
  outputFileSystem: 
   NodeOutputFileSystem {
     mkdirp: 
      { [Function: mkdirP]
        mkdirP: [Circular],
        mkdirp: [Circular],
        sync: [Function: sync] },
     mkdir: [Function: bound ],
     rmdir: [Function: bound ],
     unlink: [Function: bound ],
     writeFile: [Function: bound ],
     join: [Function: bound join] },
  inputFileSystem: 
   CachedInputFileSystem {
     fileSystem: NodeJsInputFileSystem {},
     _statStorage: 
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _readdirStorage: 
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _readFileStorage: 
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _readJsonStorage: 
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _readlinkStorage: 
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _stat: [Function: bound bound ],
     _statSync: [Function: bound bound ],
     _readdir: [Function: bound readdir],
     _readdirSync: [Function: bound readdirSync],
     _readFile: [Function: bound bound readFile],
     _readFileSync: [Function: bound bound ],
     _readJson: [Function],
     _readJsonSync: [Function],
     _readlink: [Function: bound bound ],
     _readlinkSync: [Function: bound bound ] },
  recordsInputPath: null,
  recordsOutputPath: null,
  records: {},
  fileTimestamps: Map {},
  contextTimestamps: Map {},
  resolverFactory: 
   ResolverFactory {
     _pluginCompat: 
      SyncBailHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     hooks: { resolveOptions: [Object], resolver: [Object] },
     cache1: WeakMap {},
     cache2: Map {} },
  resolvers: 
   { normal: 
      { plugins: [Function: deprecated],
        apply: [Function: deprecated] },
     loader: 
      { plugins: [Function: deprecated],
        apply: [Function: deprecated] },
     context: 
      { plugins: [Function: deprecated],
        apply: [Function: deprecated] } },
  options: 
   { name: 'Abcd',
     target: 'node',
     mode: 'production',
     entry: 'D:\\projects\\github\\react-ssr-jest\\src\\entry-server.js',
     output: 
      { path: 'D:\\projects\\github\\react-ssr-jest\\public',
        filename: 'server-bundle.js',
        libraryTarget: 'commonjs2',
        chunkFilename: '[id].server-bundle.js',
        webassemblyModuleFilename: '[modulehash].module.wasm',
        library: '',
        hotUpdateFunction: 'webpackHotUpdate',
        jsonpFunction: 'webpackJsonp',
        chunkCallbackName: 'webpackChunk',
        globalObject: 'global',
        devtoolNamespace: '',
        pathinfo: false,
        sourceMapFilename: '[file].map[query]',
        hotUpdateChunkFilename: '[id].[hash].hot-update.js',
        hotUpdateMainFilename: '[hash].hot-update.json',
        crossOriginLoading: false,
        jsonpScriptType: false,
        chunkLoadTimeout: 120000,
        hashFunction: 'md4',
        hashDigest: 'hex',
        hashDigestLength: 20,
        devtoolLineToLine: false,
        strictModuleExceptionHandling: false },
     module: 
      { rules: [Array],
        unknownContextRequest: '.',
        unknownContextRegExp: false,
        unknownContextRecursive: true,
        unknownContextCritical: true,
        exprContextRequest: '.',
        exprContextRegExp: false,
        exprContextRecursive: true,
        exprContextCritical: true,
        wrappedContextRegExp: /.*/,
        wrappedContextRecursive: true,
        wrappedContextCritical: false,
        strictExportPresence: false,
        strictThisContextOnImports: false,
        unsafeCache: false,
        defaultRules: [Array] },
     plugins: [ TestWebpackPlugin {} ],
     context: 'D:\\projects\\github\\react-ssr-jest',
     devtool: false,
     cache: false,
     node: 
      { console: false,
        process: true,
        global: true,
        Buffer: true,
        setImmediate: true,
        __filename: 'mock',
        __dirname: 'mock' },
     performance: false,
     optimization: 
      { removeAvailableModules: true,
        removeEmptyChunks: true,
        mergeDuplicateChunks: true,
        flagIncludedChunks: true,
        occurrenceOrder: true,
        sideEffects: true,
        providedExports: true,
        usedExports: true,
        concatenateModules: true,
        splitChunks: [Object],
        runtimeChunk: undefined,
        noEmitOnErrors: true,
        checkWasmTypes: true,
        mangleWasmImports: false,
        namedModules: false,
        namedChunks: false,
        portableRecords: false,
        minimize: true,
        minimizer: [Array],
        nodeEnv: 'production' },
     resolve: 
      { unsafeCache: true,
        modules: [Array],
        extensions: [Array],
        mainFiles: [Array],
        aliasFields: [],
        mainFields: [Array],
        cacheWithContext: false },
     resolveLoader: 
      { unsafeCache: true,
        mainFields: [Array],
        extensions: [Array],
        mainFiles: [Array],
        cacheWithContext: false } },
  context: 'D:\\projects\\github\\react-ssr-jest',
  requestShortener: 
   RequestShortener {
     currentDirectoryRegExp: /(^|!)D:\/projects\/github\/react\-ssr\-jest/g,
     parentDirectoryRegExp: /(^|!)D:\/projects\/github/g,
     buildinsAsModule: true,
     buildinsRegExp: /(^|!)D:\/projects\/github\/react\-ssr\-jest\/node_modules\/webpack/g,
     cache: Map {} },
  running: false,
  watchFileSystem: 
   NodeWatchFileSystem {
     inputFileSystem: 
      CachedInputFileSystem {
        fileSystem: NodeJsInputFileSystem {},
        _statStorage: [Object],
        _readdirStorage: [Object],
        _readFileStorage: [Object],
        _readJsonStorage: [Object],
        _readlinkStorage: [Object],
        _stat: [Function: bound bound ],
        _statSync: [Function: bound bound ],
        _readdir: [Function: bound readdir],
        _readdirSync: [Function: bound readdirSync],
        _readFile: [Function: bound bound readFile],
        _readFileSync: [Function: bound bound ],
        _readJson: [Function],
        _readJsonSync: [Function],
        _readlink: [Function: bound bound ],
        _readlinkSync: [Function: bound bound ] },
     watcherOptions: { aggregateTimeout: 200 },
     watcher: 
      EventEmitter {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        options: [Object],
        watcherOptions: [Object],
        fileWatchers: [],
        dirWatchers: [],
        mtimes: {},
        paused: false,
        aggregatedChanges: [],
        aggregatedRemovals: [],
        aggregateTimeout: 0,
        _onTimeout: [Function: bound _onTimeout] } } }
Hash: a88248e8a4315921f1b4
Version: webpack 4.12.0
Time: 903ms
Built at: 2018-06-13 17:13:17
           Asset     Size  Chunks             Chunk Names
server-bundle.js  175 KiB       0  [emitted]  main
